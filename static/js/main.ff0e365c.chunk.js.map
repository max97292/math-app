{"version":3,"sources":["App.js","index.js"],"names":["App","useState","number1","setNumber1","number2","setNumber2","operator","setOperator","handleDrop","spot","item","text","backend","MultiBackend","options","HTML5toTouch","className","Spot","type","isFinite","eval","Array","fill","map","n","i","Card","o","useDrop","accept","drop","collect","monitor","isOver","canDrop","dropRef","backgroundColor","ref","style","useDrag","opacity","isDragging","dragRef","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kwCAMe,SAASA,MACtB,cAA8BC,oDAAS,GAAvC,qLAAOC,QAAP,cAAgBC,WAAhB,cACA,WAA8BF,oDAAS,GAAvC,sLAAOG,QAAP,cAAgBC,WAAhB,cACA,WAAgCJ,oDAAS,KAAzC,sLAAOK,SAAP,cAAiBC,YAAjB,cAEA,SAASC,WAAWC,EAAMC,GACX,YAATD,GAAoBN,WAAWO,EAAKC,MAC3B,YAATF,GAAoBJ,WAAWK,EAAKC,MAC3B,aAATF,GAAqBF,YAAYG,EAAKC,MAG5C,OACE,2DAAC,yCAAD,CAAaC,QAASC,uDAAcC,QAASC,6EAA7C,SACE,mEAAKC,UAAU,MAAf,UAEE,mEAAKA,UAAU,YAAf,UACE,2DAACC,KAAD,CACEC,KAAK,SACLP,KAAMT,QACNO,KAAK,UACLD,WAAYA,aAEd,2DAACS,KAAD,CACEC,KAAK,SACLP,KAAMP,QACNK,KAAK,UACLD,WAAYA,aAEd,2DAACS,KAAD,CACEC,KAAK,WACLP,KAAML,SACNG,KAAK,WACLD,WAAYA,aAEd,kEAAKQ,UAAU,QAAf,SACGG,SAASC,KAAK,GAAD,OAAIlB,SAAJ,OAAcI,UAAd,OAAyBF,WACnCgB,KAAK,GAAD,OAAIlB,SAAJ,OAAcI,UAAd,OAAyBF,UAC7B,cAIR,6EACE,kEAAKY,UAAU,gBAAf,SACGK,MAAM,IACJC,KAAK,GACLC,KAAI,SAACC,EAAGC,GAAJ,OACH,2DAACC,KAAD,CAAcR,KAAK,SAASP,KAAMc,GAAvBA,QAIjB,kEAAKT,UAAU,kBAAf,SACG,CAAC,IAAK,IAAK,IAAK,KAAKO,KAAI,SAACI,EAAGF,GAAJ,OACxB,2DAACC,KAAD,CAAcR,KAAK,WAAWP,KAAMgB,GAAzBF,gBASzB,SAASR,KAAT,GAAiD,IAAjCC,EAAgC,EAAhCA,KAAMP,EAA0B,EAA1BA,KAAMF,EAAoB,EAApBA,KAAMD,EAAc,EAAdA,WAChC,EAAuCoB,iDAAQ,CAC7CC,OAAQX,EACRY,KAAM,SAACpB,GAELF,EAAWC,EAAMC,IAEnBqB,QAAS,SAACC,GAAD,MAAc,CACrBC,SAAUD,EAAQC,SAClBC,QAASF,EAAQE,cARrB,2KAASA,EAAT,EAASA,QAASD,EAAlB,EAAkBA,OAAUE,EAA5B,KAYIC,EAAkB,UAItB,OAHIF,IAASE,EAAkB,WAC3BH,IAAQG,EAAkB,WAG5B,kEAAKpB,UAAU,OAAOqB,IAAKF,EAASG,MAAO,CAAEF,mBAA7C,SACGzB,IAKP,SAASe,KAAT,GAA+B,IAAfR,EAAc,EAAdA,KAAMP,EAAQ,EAARA,KACpB,EAA+B4B,iDAAQ,CACrCrB,OACAR,KAAM,CAAEQ,OAAMP,QACdoB,QAAS,SAACC,GAAD,MAAc,CACrBQ,QAASR,EAAQS,aAAe,GAAM,MAJ1C,oKAASD,EAAT,KAASA,QAAWE,EAApB,KAQA,OACE,kEAAK1B,UAAU,OAAOqB,IAAKK,EAASJ,MAAO,CAAEE,WAA7C,SACG7B,M,gCCtGP,2DAIAgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.ff0e365c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\nimport MultiBackend from 'react-dnd-multi-backend';\nimport HTML5toTouch from 'react-dnd-multi-backend/dist/esm/HTML5toTouch';\nimport './App.css';\n\nexport default function App() {\n  const [number1, setNumber1] = useState(1);\n  const [number2, setNumber2] = useState(3);\n  const [operator, setOperator] = useState('*');\n\n  function handleDrop(spot, item) {\n    if (spot === 'number1') setNumber1(item.text);\n    if (spot === 'number2') setNumber2(item.text);\n    if (spot === 'operator') setOperator(item.text);\n  }\n\n  return (\n    <DndProvider backend={MultiBackend} options={HTML5toTouch}>\n      <div className='app'>\n        {/* math card */}\n        <div className='math-card'>\n          <Spot\n            type='number'\n            text={number1}\n            spot='number1'\n            handleDrop={handleDrop}\n          />\n          <Spot\n            type='number'\n            text={number2}\n            spot='number2'\n            handleDrop={handleDrop}\n          />\n          <Spot\n            type='operator'\n            text={operator}\n            spot='operator'\n            handleDrop={handleDrop}\n          />\n          <div className='total'>\n            {isFinite(eval(`${number1}${operator}${number2}`))\n              ? eval(`${number1}${operator}${number2}`)\n              : 'âˆž'}\n          </div>\n        </div>\n\n        <div>\n          <div className='cards numbers'>\n            {Array(10)\n              .fill(0)\n              .map((n, i) => (\n                <Card key={i} type='number' text={i} />\n              ))}\n          </div>\n\n          <div className='cards operators'>\n            {['*', '-', '+', '/'].map((o, i) => (\n              <Card key={i} type='operator' text={o} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </DndProvider>\n  );\n}\n\nfunction Spot({ type, text, spot, handleDrop }) {\n  const [{ canDrop, isOver }, dropRef] = useDrop({\n    accept: type,\n    drop: (item) => {\n      // here is where we do the update\n      handleDrop(spot, item);\n    },\n    collect: (monitor) => ({\n      isOver: !!monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    }),\n  });\n\n  let backgroundColor = '#f2f2f2';\n  if (canDrop) backgroundColor = '#3db897';\n  if (isOver) backgroundColor = '#4bdcb5';\n\n  return (\n    <div className='spot' ref={dropRef} style={{ backgroundColor }}>\n      {text}\n    </div>\n  );\n}\n\nfunction Card({ type, text }) {\n  const [{ opacity }, dragRef] = useDrag({\n    type,\n    item: { type, text },\n    collect: (monitor) => ({\n      opacity: monitor.isDragging() ? 0.5 : 1,\n    }),\n  });\n\n  return (\n    <div className='card' ref={dragRef} style={{ opacity }}>\n      {text}\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}